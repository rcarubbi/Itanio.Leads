<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Carubbi.Utils</name>
    </assembly>
    <members>
        <member name="T:Carubbi.Utils.Configuration.AppSettings">
            <summary>
            Classe facilitadora para acessar configurações em seções de arquivos .config baseadas em Chave-Valor (Hashtable)
             <example>
                Acessando um par Chave-Valor de uma seção chamada "NomeSecao" de um arquivo app.config
                <code>
                   var configSection = new AppSettings("NomeSecao");
                   var valor = configSection["NOME_CHAVE"];
                </code>
            </example>
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Configuration.AppSettings.#ctor(System.String)">
            <summary>
            Construtor que disponibiliza uma acesso a uma determinada seção
            <example>
                Criando uma variavel que permite acesso a pares Chave-Valor de uma seção chamada "NomeSecao" de um arquivo app.config
                <code>
                   var configSection = new AppSettings("NomeSecao");
                </code>
            </example>
            </summary>
            <param name="sectionName">nome da seção no arquivo .config da aplicação</param>
        </member>
        <member name="P:Carubbi.Utils.Configuration.AppSettings.Item(System.String)">
            <summary>
            Método para acesso à um par Chave-Valor dentro de um arquivo .config
            <example>
                Exemplo de acesso a um par Chave-Valor dentro de uma seção chamada "NomeSecao" de um arquivo app.config
                <code>
                   var valor = configSection["NOME_CHAVE"];
                </code>
            </example>
            </summary>
            <param name="name">Chave para acessar um determinado valor em um arquivo .config</param>
            <returns></returns>
        </member>
        <member name="T:Carubbi.Utils.DataTypes.DateRange">
            <summary>
            Estrutura de dados que Representa um intervalo entre duas datas
            </summary>
        </member>
        <member name="P:Carubbi.Utils.DataTypes.DateRange.IsValid">
            <summary>
            Verifica se é um intervalo válido, ou seja, se a data inicial é menor ou igual à final
            </summary>
        </member>
        <member name="M:Carubbi.Utils.DataTypes.DateRange.ValidateMonthRange(System.Int32)">
            <summary>
            Valida se o intervalo é valido a partir de uma restrição em meses.
            <example>Data Inicial = 01/01/2015, Data Final = 01/05/2015
            Para as datas acima a chamada deste método é Válida Até 5 meses [ValidateMonthRange(5)], a partir do valor 6 a função retorna false
            </example>
            </summary>
            <param name="months">Quantidade de meses permitidos</param>
            <returns>Indicador se o intervalo é valido ou não</returns>
        </member>
        <member name="M:Carubbi.Utils.DataTypes.DateRange.ValidateDaysRange(System.Int32)">
            <summary>
            Valida se o intervalo é valido a partir de uma restrição em dias.
            <example>Data Inicial = 01/01/2015, Data Final = 05/01/2015
            Para as datas acima a chamada deste método é Válida Até 5 dias [ValidateDaysRange(5)], a partir do valor 6 a função retorna false
            </example>
            </summary>
            <param name="months">Quantidade de dias permitidos</param>
            <returns>Indicador se o intervalo é valido ou não</returns>
        </member>
        <member name="M:Carubbi.Utils.DataTypes.DateRange.ValidateYearsRange(System.Int32)">
            <summary>
            Valida se o intervalo é valido a partir de uma restrição em anos.
            <example>Data Inicial = 01/01/2010, Data Final = 01/01/2015
            Para as datas acima a chamada deste método é Válida Até 5 anos [ValidateYearsRange(5)], a partir do valor 6 a função retorna false
            </example>
            </summary>
            <param name="months">Quantidade de anos permitidos</param>
            <returns>Indicador se o intervalo é valido ou não</returns>
        </member>
        <member name="T:Carubbi.Utils.Data.CNAEHelper">
            <summary>
             Classe com métodos para tratamento de Códigos CNAE
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.CNAEHelper.LerCnae(System.String)">
            <summary>
            Separa a porção númerica da porção alfabética de um código CNAE
            <example>
                <code>
                   var par = CNAEHelper.LerCnae("A1234")
                   par.Key // "1234"
                   par.Value // "A"
                </code>
            </example>
            </summary>
            <param name="cnae">Código CNAE a ser analisado</param>
            <returns>Par Chave-Valor onde a chave é a porção numérica e o valor a porção alfabética</returns>
        </member>
        <member name="T:Carubbi.Utils.Data.ConversionExtensions">
            <summary>
            Classe com métodos de extensão relacionados a conversão de dados
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.To``1(System.String)">
            <summary>
            Converte o tipo de dado do objeto chamador em outro especificado
            </summary>
            <typeparam name="TargetType">Tipo de destino</typeparam>
            <param name="instance">Instância do objeto chamador</param>
            <returns>Valor convertido em Tipo Nullable</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.To``1(System.String,``0)">
            <summary>
            Converte o tipo de dado do objeto chamador em outro especificado e em caso de falha retorna um valor padrão informado como parametro
            </summary>
            <typeparam name="TargetType">Tipo de destino</typeparam>
            <param name="instance">Instância do objeto chamador</param>
            <param name="defaultValue">Valor Padrão em caso de falha</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.ParseBoolean(System.String,System.Type)">
            <summary>
            Converte expressões conhecidas como '1', 'on', 'yes', 'sucesso' em true e qualquer coisa diferente disto como false
            </summary>
            <param name="instance">Objeto Chamador</param>
            <param name="tipo">Tipo do dado de origem</param>
            <returns>Valor do retorno</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.To``1(System.Object,``0)">
            <summary>
            Converte o tipo de dado do objeto chamador em outro especificado e em caso de falha retorna um valor padrão informado como parametro
            </summary>
            <typeparam name="TargetType">Tipo de destino</typeparam>
            <param name="instance">Instância do objeto chamador</param>
            <param name="defaultValue">Valor Padrão em caso de falha</param>
            <returns>Valor convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.To``1(System.Object)">
            <summary>
            Converte o tipo de dado do objeto chamador em outro especificado
            </summary>
            <typeparam name="TargetType">Tipo de destino</typeparam>
            <param name="instance">Instância do objeto chamador</param>
            <returns>Valor convertido em Tipo Nullable</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ConversionExtensions.ToJaggedArray``1(``0[0:,0:])">
            <summary>
            Converte um array Bidimensional em um Jagged array
            </summary>
            <typeparam name="T">Tipo de entrada</typeparam>
            <param name="twoDimensionalArray">Array Bidimensional</param>
            <returns>Jagged Array</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Carubbi.Utils.Data.EnumerableExtensions" -->
        <member name="M:Carubbi.Utils.Data.EnumerableExtensions.InterleaveLists``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Intercala duas listas na seguinte sequencia A1, B1, A2, B2, A3, B3, ....
            </summary>
            <typeparam name="T">Tipo do item das listas</typeparam>
            <param name="first">Lista A</param>
            <param name="second">Lista B</param>
            <returns>Lista Intercalada</returns>
        </member>
        <member name="T:Carubbi.Utils.Data.EnumerationExtensions">
            <summary>
            Métodos de extensão para Enums
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Text``1(``0)">
            <summary>
            Recupera o texto de um item de um Enum configurado no Atributo Description do namespace System.ComponentModel
            </summary>
            <typeparam name="T">Tipo do Enum</typeparam>
            <param name="item">Item do Enum</param>
            <returns>Texto da Description</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Carubbi.Utils.Data.EnumerationExtensions.ToList``1(System.Enum)" -->
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Has``1(System.Enum,``0)">
            <summary>
            Verifica se uma variável contém um determinado item do Enum nela
            </summary>
            <typeparam name="T">Tipo do Enum</typeparam>
            <param name="type">Tipo do Enum</param>
            <param name="value">Item do Enum</param>
            <returns>Indicador se possui ou não</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Is``1(System.Enum,``0)">
            <summary>
            Verifica se uma variável é um determinado item do Enum nela
            </summary>
            <typeparam name="T">Tipo do Enum</typeparam>
            <param name="type">Tipo do Enum</param>
            <param name="value">Item do Enum</param>
            <returns>Indicador se possui ou não</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Ids(System.Enum)">
            <summary>
            Retorna os valores numéricos dos itens de um Enum em uma string separados por virgula
            </summary>
            <param name="type">Tipo do Enum</param>
            <returns>String com os valores separados por vírgula</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Add``1(System.Enum,``0)">
            <summary>
            Adiciona um item em uma variável do tipo Enum
            </summary>
            <typeparam name="T">Tipo do Enum</typeparam>
            <param name="type">Tipo do Enum</param>
            <param name="value">Item do Enum</param>
            <returns>O Proprio Valor do Enum</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.EnumerationExtensions.Remove``1(System.Enum,``0)">
            <summary>
            Remove um item em uma variável do tipo Enum
            </summary>
            <typeparam name="T">Tipo do Enum</typeparam>
            <param name="type">Tipo do Enum</param>
            <param name="value">Item do Enum</param>
            <returns>O Proprio Valor do Enum</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Carubbi.Utils.Data.EnumerationExtensions.ToDataSource``1(System.Enum)" -->
        <member name="M:Carubbi.Utils.Data.CNPJHelper.CompletarDigitos(System.String)">
            <summary>
            Retorna um CNPJ completo, com os digitos verificadores
            </summary>
            <param name="strCNPJSemDigitosVerificadores">CNPJ sem digitos Verificadores</param>
            <returns>CNPJ Completo</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.GetMilContra(System.String)">
            <summary>
            Pega a Raiz do CNPJ informado e resolve os digitos verificadores para o sufixo 0001
            </summary>
            <param name="cnpj">CNPJ a ser resolvido</param>
            <returns>Raiz do original + Sufixo 0001 e seu DV</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.IsMilContra(System.String)">
            <summary>
            Verifica se o sufixo de um CNPJ é 0001
            </summary>
            <param name="cnpj">CNPJ a ser analisado</param>
            <returns>indicador se possui sufixo igual à 0001</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.IsMilContra(System.Int64)">
            <summary>
            Verifica se o sufixo de um CNPJ é 0001
            </summary>
            <param name="cnpj">CNPJ a ser analisado</param>
            <returns>indicador se possui sufixo igual à 0001</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.GetSufixo(System.String)">
            <summary>
            Retorna o sufixo de um CNPJ
            </summary>
            <param name="cnpj">CNPJ a ser analisado</param>
            <returns>Sufixo do CNPJ</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.ToString(System.Int64)">
            <summary>
            Converte o cnpj numérico para string completando com 0s à esquerda
            </summary>
            <param name="cnpj">CNPJ</param>
            <returns>CNPJ Convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.ToString(System.String)">
            <summary>
            Converte um texto que contem um cnpj em apenas o CNPJ
            </summary>
            <param name="cnpj">CNPJ</param>
            <returns>CNPJ Convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.ToLong(System.String)">
            <summary>
             Converte um cnpj em texto para número
            </summary>
            <param name="cnpj"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.GetRaiz(System.String)">
            <summary>
            Recupera a Raiz de um CNPJ
            </summary>
            <param name="cnpj"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.CNPJHelper.GetDigitos(System.String)">
            <summary>
            Recupera os digitos verificadores
            </summary>
            <param name="cnpj">CNPJ</param>
            <returns>Digitos Verificadores</returns>
        </member>
        <member name="T:Carubbi.Utils.Data.MathHelper">
            <summary>
            Biblioteca de Funções Matemáticas
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Data.ObjectExtensions">
            <summary>
            Extension methods para a classe Object
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.ObjectExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Definir o valor de uma propriedade por reflexão
            </summary>
            <param name="instance">Objeto a ser afetado</param>
            <param name="propertyName">Nome da propriedade</param>
            <param name="value">Novo Valor</param>
        </member>
        <member name="M:Carubbi.Utils.Data.ObjectExtensions.GetProperty``1(System.Object,System.String)">
            <summary>
            Recuperar o valor de uma propriedade por reflexão
            </summary>
            <typeparam name="T">Tipo do valor da propriedade</typeparam>
            <param name="instance">Objeto a ser afetado</param>
            <param name="propertyName">Nome da Propriedade</param>
            <returns>Valor da propriedade</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ObjectExtensions.Call``1(System.Object,System.String,System.Object[])">
            <summary>
            Chama um método que retorna valor por reflexão
            </summary>
            <typeparam name="T">Tipo de saida do método</typeparam>
            <param name="instance">Objeto a ser afetado</param>
            <param name="methodName">Nome do método</param>
            <param name="parameters">Lista de Parâmetros</param>
            <returns>Valor de retorno</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.ObjectExtensions.Call(System.Object,System.String,System.Object[])">
            <summary>
            Chama um método sem retorno por reflexão
            </summary>
            <param name="instance">Objeto a ser afetado</param>
            <param name="methodName">Nome do método</param>
            <param name="parameters">Lista de parâmetros</param>
        </member>
        <member name="T:Carubbi.Utils.Data.StringExtensions">
            <summary>
            Extension Methods para a classe String
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Retorna N caracteres a esquerda de um determinado texto
            </summary>
            <param name="value">Texto</param>
            <param name="maxLength">Quantidade de Caracteres a Esquerda</param>
            <returns>Trecho do texto selecionado</returns>
        </member>
        <member name="M:Carubbi.Utils.Data.StringExtensions.ToLineArray(System.String)">
            <summary>
            Converte uma string em um array de linhas quebrando pelo escape \n
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Carubbi.Utils.Data.GenericEqualityComparer`1" -->
        <member name="P:Carubbi.Utils.Data.GenericEqualityComparer`1.PropriedadesComparadas">
            <summary>
            Getter e Setter do array com os nomes das propriedades a serem comparadas
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.#ctor(System.String[])">
            <summary>
            Constroi um Objeto informando por quais propriedades devem ser feita a comparação
            </summary>
            <param name="propriedadesComparadas"></param>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.#ctor">
            <summary>
            Construtor Padrão
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Verifica a igualdade entre dois objetos por reflexão a partir das propriedades configuradas no construtor ou no setter PropriedadesComparadas
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Recupera o HashCode das propriedades configuradas no construtor ou no setter PropriedadesComparadas
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.ObterPropriedades">
            <summary>
            Recupera os metadados das propriedades configuradas no construtor ou no setter PropriedadesComparadas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericEqualityComparer`1.Compare(`0,`0)">
            <summary>
            Compara dois objetos por reflexão a partir das propriedades configuradas no construtor ou no setter PropriedadesComparadas
            </summary>
            <param name="Object1">Primeiro Objeto</param>
            <param name="object2">Segundo Objeto</param>
            <returns>Verdadeiro se os objetos forem iguais e falso se forem diferentes</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Carubbi.Utils.Data.GenericMultipleComparer`1" -->
        <member name="P:Carubbi.Utils.Data.GenericMultipleComparer`1.SortClasses">
            <summary>
            Coleção de Metadados de propriedades através das quais será feita a ordenação
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericMultipleComparer`1.#ctor">
            <summary>
            Costrutor Padrão
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericMultipleComparer`1.#ctor(System.Collections.Generic.List{Carubbi.Utils.Data.SortClass})">
            <summary>
            Construtor que recebe uma coleção de metadados de propriedades de ordeção
            </summary>
            <param name="SortClasses">lista de metadados</param>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericMultipleComparer`1.#ctor(System.String,Carubbi.Utils.Data.SortDirection)">
            <summary>
            Construtor que recebe metadados de apenas uma propriedade
            </summary>
            <param name="SortColumn">Nome da propriedade</param>
            <param name="SortDirection">Direção da ordenação</param>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericMultipleComparer`1.Compare(`0,`0)">
            <summary>
            Comparação de dois objetos através de reflexão a partir dos metadados das propriedades configuradas
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.Data.GenericMultipleComparer`1.CheckSort(System.Int32,`0,`0)">
            <summary>
            Método de ordenação recursivo
            </summary>
            <param name="SortLevel">Nível na pilha de chamadas</param>
            <param name="MyObject1">Objeto 1</param>
            <param name="MyObject2">Objeto 2</param>
            <returns></returns>
        </member>
        <member name="T:Carubbi.Utils.Data.SortDirection">
            <summary>
            Enumerador que determina a direção da ordenação
            </summary>
        </member>
        <member name="F:Carubbi.Utils.Data.SortDirection.Ascending">
            <summary>Sort Ascending</summary>
        </member>
        <member name="F:Carubbi.Utils.Data.SortDirection.Descending">
            <summary>Sort Descending</summary>
        </member>
        <member name="T:Carubbi.Utils.Data.SortClass">
            <summary>
            Estrutura de dados que representa os metadados de uma propriedade no contexto da ordenação
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Data.SortClass.#ctor(System.String,Carubbi.Utils.Data.SortDirection)">
            <summary>
            Construtor padrão que recebe o nome da propriedade e a direção da ordenação
            </summary>
            <param name="SortColumn">Nome da Coluna a ser ordenada</param>
            <param name="SortDirection">Direção da Ordenação</param>
        </member>
        <member name="P:Carubbi.Utils.Data.SortClass.SortColumn">
            <summary>
            The column to sort on
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Data.SortClass.SortDirection">
            <summary>
            The direction to sort
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Image.BitmapExtensions">
            <summary>
            Extension Methods para a classe Bitmap
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Image.BitmapExtensions.ToBitmap(System.Byte[])">
            <summary>
            Converte um array de bytes em um bitmap
            </summary>
            <param name="instance">Objeto a ser convertido</param>
            <returns>Bitmap convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Image.BitmapExtensions.ToByteArray(System.Drawing.Bitmap)">
            <summary>
            Converte um Bitmap em byte array
            </summary>
            <param name="instance">Bitmap a ser convertido</param>
            <returns>byte array convertido</returns>
        </member>
        <member name="M:Carubbi.Utils.Image.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Recorta uma imagem a partir das coordenadas do retangulo informado
            </summary>
            <param name="source">Bitmap a ser recortado</param>
            <param name="section">Retangulo com as coordenadas do recorte</param>
            <returns>byte arrah da imagem recortada</returns>
        </member>
        <member name="T:Carubbi.Utils.Image.ImageExtensions">
            <summary>
            Extension Methods da classe Image
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Image.ImageExtensions.GetImageFormat(System.Drawing.Image)">
            <summary>
            Recupera o ImageFormat a partir do RawFormat da imagem
            </summary>
            <param name="img">Image a ser verificado</param>
            <returns>Item do enum ImageFormat</returns>
        </member>
        <member name="M:Carubbi.Utils.Image.ImageExtensions.GetExtension(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Recupera a extensão padrão do arquivo a partir de seu image format
            </summary>
            <param name="imageFormat">Enum ImageFormat</param>
            <returns>extensão do arquivo</returns>
        </member>
        <member name="M:Carubbi.Utils.Image.ImageExtensions.GetImageFormat(System.String)">
            <summary>
            Recupera o formato da imagem a partir da extensão
            </summary>
            <param name="extension">extensão do arquivo</param>
            <returns>Objeto ImageFormat</returns>
        </member>
        <member name="T:Carubbi.Utils.Mail.MailMessageFactory">
            <summary>
            Fabrica responsável por criar objetos MailMessage
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Mail.MailMessageFactory.CreateBrazilianHTMLMessage(System.String,System.String)">
            <summary>
            Cria uma MailMessage configurada para o padrão Brasileiro
            </summary>
            <param name="subject">Assunto</param>
            <param name="body">Corpo da mensagem</param>
            <returns>Objeto Criado</returns>
        </member>
        <member name="T:Carubbi.Utils.NativeWin32.User32Facade">
            <summary>
            Expõe funcões da biblioteca nativa do Windows User32.dll
            </summary>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.FindWindow(System.String,System.String)">
            <summary>
            Procura uma janela pelo nome
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns>Handle Id da janela</returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.SendMessage(System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Envia uma mensagem para uma determinada janela
            </summary>
            <param name="hWnd">handle to destination window</param>
            <param name="Msg">message</param>
            <param name="wParam">first message parameter</param>
            <param name="lParam">second message parameter</param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.SetForegroundWindow(System.Int32)">
            <summary>
            Traz uma janela para frente
            </summary>
            <param name="hWnd">handle to window</param>
            <returns></returns>
        </member>
        <member name="T:Carubbi.Utils.NativeWin32.User32Facade.EnumWindowsProcDelegate">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.EnumWindows(Carubbi.Utils.NativeWin32.User32Facade.EnumWindowsProcDelegate,System.Int32)">
            <summary>
            
            </summary>
            <param name="lpEnumFunc"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.GetWindowText(System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="nMaxCount"></param>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.GetWindowLongPtr(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.GetParent(System.Int32)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.GetWindow(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="wCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.IsWindowVisible(System.Int32)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:Carubbi.Utils.NativeWin32.User32Facade.GetDesktopWindow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Carubbi.Utils.Persistence.CampoChaveAttribute">
            <summary>
            Atributo para marcar propriedades como Campos Chave, utilizada junto com o framework de persistencia Carubbi.DAL
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Persistence.CampoNaoPersistivelAttribute">
            <summary>
            Atributo utilizado para marcar Propriedades que não devem ser mapeadas pelo framework de persistência Carubbi.DAL
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Persistence.Serializer`1">
            <summary>
            Serializador Genérico
            </summary>
            <typeparam name="T">Tipo a ser serializado/desserializado</typeparam>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.BinarySerialize(System.String,`0)">
            <summary>
            Serializa um objeto em binário para um determinado caminho e arquivo
            </summary>
            <param name="path">Caminho do arquivo físico onde serão gravados os dados</param>
            <param name="instance">Objeto a ser serializado</param>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.BinaryDeserialize(System.String)">
            <summary>
            Desserializa um objeto persistido no modo binário
            </summary>
            <param name="path">Caminho do arquivo binário</param>
            <returns>Objeto desserializado</returns>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.XmlSerialize(`0)">
            <summary>
            Serializa um objeto em XML
            </summary>
            <param name="instance">Objeto a ser serializado</param>
            <returns>XML gerado</returns>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.XmlSerialize(System.Uri,`0)">
            <summary>
            Serializa um objeto em xml
            </summary>
            <param name="path">Caminho do xml a ser gerado</param>
            <param name="instance">Objeto a ser serializado</param>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.XmlDeserialize(System.Uri)">
            <summary>
            Desserializa um objeto a partir de um arquivo xml
            </summary>
            <param name="path">Caminho do arquivo xml</param>
            <returns>Objeto desserializado</returns>
        </member>
        <member name="M:Carubbi.Utils.Persistence.Serializer`1.XmlDeserialize(System.String)">
            <summary>
            Desserializa um objeto a partir do conteudo xml informado
            </summary>
            <param name="path">Conteúdo XML</param>
            <returns>Objeto desserializado</returns>
        </member>
        <member name="T:Carubbi.Utils.Persistence.StreamExtensions">
            <summary>
            Extensions Methods relacionados a classe Stream
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Persistence.StreamExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Converte um objeto stream em byte array
            </summary>
            <param name="stream">Objeto stream a ser convertido</param>
            <returns>array de bytes</returns>
        </member>
        <member name="M:Carubbi.Utils.Persistence.StreamExtensions.CopyBytes(System.IO.Stream,System.Byte[]@,System.Int32@,System.Int32)">
            <summary>
            Copia os bytes de um trecho de um objeto stream para um buffer (Array de bytes)
            </summary>
            <param name="stream">Stream a ser lido</param>
            <param name="readBuffer">Buffer a ser preenchido</param>
            <param name="totalBytesRead">Total de bytes a serem lidos (Byte Final)</param>
            <param name="bytesRead">Byte inicial</param>
        </member>
        <member name="M:Carubbi.Utils.Persistence.StreamExtensions.GetMimeType(System.String)">
            <summary>
            Resolve o MimeType de um arquivo a partir da extensão do nome do arquivo
            </summary>
            <param name="instance">Nome do arquivo</param>
            <returns>MimeType</returns>
        </member>
        <member name="T:Carubbi.Utils.Resources.RobotsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.config">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.excel">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Resources.RobotsResources.stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Security.CriptografiaSimetrica">
            <summary>
            Implementação de criptografia Simétrica
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.SetIV">
            <summary>
            Inicialização do vetor do algoritmo simétrico
            </summary>
        </member>
        <member name="P:Carubbi.Utils.Security.CriptografiaSimetrica.Key">
            <summary>
            Chave secreta para o algoritmo simétrico de criptografia.
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.#ctor">
            <summary>
            Contrutor padrão da classe, é setado um tipo de criptografia padrão (Rijndael).
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.#ctor(Carubbi.Utils.Security.SymmetricCryptProvider)">
            <summary>
            Construtor com o tipo de criptografia a ser usada Você pode escolher o tipo pelo Enum chamado CryptProvider.
            </summary>
            <param name="cryptProvider">Tipo de criptografia.</param>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.GetKey">
            <summary>
            Gera a chave de criptografia válida dentro do array.
            </summary>
            <returns>Chave com array de bytes.</returns>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.Encrypt(System.String)">
            <summary>
            Encripta o dado solicitado.
            </summary>
            <param name="plainText">Texto a ser criptografado.</param>
            <returns>Texto criptografado.</returns>
        </member>
        <member name="M:Carubbi.Utils.Security.CriptografiaSimetrica.Decrypt(System.String)">
            <summary>
            Desencripta o dado solicitado.
            </summary>
            <param name="cryptoText">Texto a ser descriptografado.</param>
            <returns>Texto descriptografado.</returns>
        </member>
        <member name="T:Carubbi.Utils.Security.SymmetricCryptProvider">
            <summary>
            Enumerator com os tipos de classes para criptografia.
            </summary>
        </member>
        <member name="F:Carubbi.Utils.Security.SymmetricCryptProvider.Rijndael">
            <summary>
            Representa a classe base para implementações criptografia dos algoritmos simétricos Rijndael.
            </summary>
        </member>
        <member name="F:Carubbi.Utils.Security.SymmetricCryptProvider.RC2">
            <summary>
            Representa a classe base para implementações do algoritmo RC2.
            </summary>
        </member>
        <member name="F:Carubbi.Utils.Security.SymmetricCryptProvider.DES">
            <summary>
            Representa a classe base para criptografia de dados padrões (DES - Data Encryption Standard).
            </summary>
        </member>
        <member name="F:Carubbi.Utils.Security.SymmetricCryptProvider.TripleDES">
            <summary>
            Representa a classe base (TripleDES - Triple Data Encryption Standard).
            </summary>
        </member>
        <member name="T:Carubbi.Utils.UIControls.AbortableBackgroundWorker">
            <summary>
            BackgroundWorker com capacidade de abortar a thread no caso de uma ThreadAbortException
            </summary>
        </member>
        <member name="M:Carubbi.Utils.UIControls.AbortableBackgroundWorker.Abort">
            <summary>
            Aborta a thread interna
            </summary>
        </member>
        <member name="T:Carubbi.Utils.UIControls.ComboBoxTree">
            <summary>
            ComboBoxTree control is a treeview that drops down much like a combobox
            </summary>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.LabelEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.LabelEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.ButtonEx.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.ButtonEx.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.ButtonEx.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ComboBoxTree.ButtonEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Carubbi.Utils.UIControls.ControlExtensions">
            <summary>
            Extension Methods da Classe Control
            </summary>
        </member>
        <member name="M:Carubbi.Utils.UIControls.ControlExtensions.InvokeIfRequired(System.Windows.Forms.Control,System.Action{System.Windows.Forms.Control})">
            <summary>
            Envolve um trecho de código no padrão InvokeRequired
            <para>Verifica se é necessária a passagem do controle para a thread principal caso o controle tenha sido construido a partir dela para poder chamar o método no delegate action</para>
            <example>
                var objeto = new Foo();
                objeto.InvokeIfRequired(obj => {
                    obj.Prop = 123; 
                    obj.Metodo();    
                });
            </example>
            </summary>
            <param name="c">Controle</param>
            <param name="action">Método a ser executado pela thread</param>
        </member>
        <member name="P:Carubbi.Utils.UIControls.ExtendedDateTimePicker.BackColor">
            <summary>
                Gets or sets the background color of the control
            </summary>
        </member>
        <member name="P:Carubbi.Utils.UIControls.ExtendedDateTimePicker.BackDisabledColor">
            <summary>
                Gets or sets the background color of the control when disabled
            </summary>
        </member>
        <member name="T:Carubbi.Utils.UIControls.ToolstripCheckbox">
            <summary>
            Checkbox customizado para ser colocado na Toolstrip
            </summary>
        </member>
        <member name="T:Carubbi.Utils.UIControls.ToolstripDefaultTextBox">
            <summary>
            Textbox padrão customizado para ser colocado na Toolstrip
            </summary>
        </member>
        <member name="P:Carubbi.Utils.UIControls.ToolstripDefaultTextBox.PasswordChar">
            <summary>
            Caractere para senhas
            </summary>
        </member>
        <member name="T:Carubbi.Utils.Validation.ValidationExtension">
            <summary>
            Extension Methods de validação
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Validation.ValidationExtension.IsCnpj(System.String)">
            <summary>
            Verifica se a string é um CNPJ válido
            </summary>
            <param name="cnpj">string chamadora</param>
            <returns>Resultado da validação</returns>
        </member>
        <member name="M:Carubbi.Utils.Validation.ValidationExtension.IsValidEmail(System.String)">
            <summary>
            Valida E-mail a partir do padrão RFC 2822
            Fonte: http://www.regular-expressions.info/email.html
            </summary>
            <param name="email">Endereço de e-mail para ser validado</param>
            <returns>Resultado da validação</returns>
        </member>
        <member name="M:Carubbi.Utils.Validation.ValidationExtension.IsCpf(System.String)">
            <summary>
            Valida CPF
            Fonte: http://www.macoratti.net/11/09/c_val1.htm
            </summary>
            <param name="cpf">CPF para ser validado</param>
            <returns>Retorna true caso seja um cpf válido e false caso não seja.</returns>
        </member>
        <member name="T:Carubbi.Utils.Validation.MaskHelper">
            <summary>
            Biblioteca com algorítmos de máscaras de entrada
            </summary>
        </member>
        <member name="M:Carubbi.Utils.Validation.MaskHelper.OnlyDigits(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Permite apenas numeros
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Carubbi.Utils.IoC.ImplementationResolver">
            <summary>
            Container de injeção de dependência
            <para>Através desta classe é possível solicitar uma implementação concreta para uma interface sem o uso da palavra chave "new" nem qualquer referencia direta a classe concreta, 
            o que permite que um projeto não possua referencia direta ao projeto que possui a classe concreta, 
            dando mais flexibilidade ao código.</para>
            <para>
            Para que isto funcione, a classe concreta é instanciada por reflexão e o tipo é resolvido a partir de um arquivo de configurações que indica qual classe concreta implementa qual interface
            </para>
            <example>
                <para>&lt;configSections&gt;</para>
                    <para>&lt;section name="Implementations" type="System.Configuration.DictionarySectionHandler"/&gt;</para>
                 <para>&lt;/configSections&gt;</para>
                <para>&lt;Implementations&gt;</para>
                    <para>&lt;add key="IDAOFactory" value="Itau.BSITokenDALFactory.DAOFactory, Itau.BSITokenDALFactory" /&gt;</para>
                    <para>&lt;add key="IDbDataParameter" value="System.Data.SqlClient.SqlParameter, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /&gt;</para>
                    <para>&lt;add key="IGeradorPlanilha[RelatorioExecucaoData]" value="Carubbi.Excel.Implementations.GeradorAsposeCells`1[[Itau.ProtocoloFiname.Entities.Relatorio.RelatorioExecucaoData, Itau.ProtocoloFiname.Entities]], Carubbi.Excel" /&gt;</para>
                <para>&lt;/Implementations&gt;</para>
            </example>
            </summary>
        </member>
        <member name="P:Carubbi.Utils.IoC.ImplementationResolver.ImplementationsFileName">
            <summary>
            Getter e Setter do Nome do Arquivo de configurações, caso não definido o padrão é Implementations
            </summary>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.ResolveSingleton``1">
            <summary>
            Invoca o método GetInstance de uma determinada classe T para construir um objeto que implementa o padrão Singleton
            </summary>
            <typeparam name="T">Tipo da Interface a ser resolvida</typeparam>
            <returns>Objeto concreto construido</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve``1">
            <summary>
            Resolve uma interface a partir do tipo T chamando seu construtor padrão
            </summary>
            <typeparam name="T">Tipo da Interface a ser resolvida</typeparam>
            <returns>Objeto concreto criado</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve``1(System.Object[])">
            <summary>
            Resolve uma interface a partir do tipo T chamando um construtor com parâmetros previamente conhecido
            </summary>
            <typeparam name="T">Tipo da Interface a ser resolvida</typeparam>
            <param name="parameters">Lista de Parâmetros</param>
            <returns>Objeto concreto criado</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve(System.String,System.Object[])">
            <summary>
            Resolve uma interface a partir de uma chave alfanumérica chamando um construtor com parâmetros previamente conhecido
            </summary>
            <param name="key">Chave Alfanumérica</param>
            <param name="parameters">Lista de Parâmetros</param>
            <returns>Objeto concreto criado</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve(System.String)">
            <summary>
            Resolve uma interface a partir de uma chave alfanumérica chamando o construtor padrão
            </summary>
            <param name="key">Chave Alfanumérica</param>
            <returns>Objeto concreto criado</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve``1(System.String)">
            <summary>
            Resolve uma interface a partir de uma chave alfanumérica chamando o construtor padrão
            </summary>
            <typeparam name="T">Tipo de Retorno</typeparam>
            <param name="key">Chave Alfanumérica</param>
            <returns>Objeto concreto criado fortemente tipado</returns>
        </member>
        <member name="M:Carubbi.Utils.IoC.ImplementationResolver.Resolve``1(System.String,System.Object[])">
            <summary>
            Resolve uma interface a partir de uma chave alfanumérica chamando um construtor com parâmetros previamente conhecido
            </summary>
            <typeparam name="T">Tipo de Retorno</typeparam>
            <param name="key">Chave Alfanumérica</param>
            <param name="parameters">Lista de Parâmetros</param>
            <returns>Objeto concreto criado fortemente tipado</returns>
        </member>
    </members>
</doc>
